{"version":3,"file":"data-consumer-api.js","sources":["../../src/utils/data-consumer-api.ts"],"sourcesContent":["import { MOTIVE } from '@blindnet/prci/dist/models/priv-terms.js';\nimport { PendingDemandResponse } from '../models/pending-demand-response.js';\nimport { PendingRequestsResponse } from '../models/pending-requests-response.js';\n\n/**\n * Gets a list of all demands which are pending a response\n * @returns {PendingRequestsResponse[]}\n */\nexport async function getPendingDemands() {\n  return fetch(\n    `https://devkit-pce-staging.azurewebsites.net/v0/consumer-interface/pending-requests`,\n    {\n      method: 'GET',\n      headers: { accept: 'application/json' },\n    }\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json() as Promise<PendingRequestsResponse[]>;\n  });\n}\n\n/**\n * Get the info and recomendation for a specific demand\n * @param {string} id uuid of the demand\n * @returns {PendingDemandResponse}\n */\nexport async function getPendingDemand(id: string) {\n  return fetch(\n    `https://devkit-pce-staging.azurewebsites.net/v0/consumer-interface/pending-requests/${id}`,\n    {\n      method: 'GET',\n      headers: { accept: 'application/json' },\n    }\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json() as Promise<PendingDemandResponse>;\n  });\n}\n\n/**\n * Approve a demand\n * @param id uuid of the demand to approve\n * @param msg optional message explaining the approval\n * @param lang language of the message\n * @returns\n */\nexport async function approveDemand(\n  id: string,\n  msg: string,\n  lang: string = 'en'\n) {\n  if (id === undefined) {\n    throw TypeError('You must pass an ID of the demand to deny.');\n  }\n\n  return fetch(\n    `https://devkit-pce-staging.azurewebsites.net/v0/consumer-interface/pending-requests/approve`,\n    {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id, msg, lang }),\n    }\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  });\n}\n\n/**\n * Deny a demand\n * @param id uuid of the demand to deny\n * @param msg optional message explaining the denial\n * @param motive motive for the denial. for the DCI, we are in the situation where demands\n * are being manually processed, so we assume the motive will be explained in msg and default to\n * 'OTHER-MOTIVE'.\n * @param lang language of the message\n * @returns\n */\nexport async function denyDemand(\n  id: string,\n  msg: string,\n  motive: MOTIVE = MOTIVE['OTHER-MOTIVE'],\n  lang: string = 'en'\n) {\n  if (id === undefined) {\n    throw TypeError('You must pass an ID of the demand to deny.');\n  }\n\n  return fetch(\n    `https://devkit-pce-staging.azurewebsites.net/v0/consumer-interface/pending-requests/deny`,\n    {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id, motive, msg, lang }),\n    }\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  });\n}\n"],"names":[],"mappings":";;AAIA;;;AAGG;AACI,eAAe,iBAAiB,GAAA;IACrC,OAAO,KAAK,CACV,CAAA,mFAAA,CAAqF,EACrF;AACE,QAAA,MAAM,EAAE,KAAK;AACb,QAAA,OAAO,EAAE,EAAE,MAAM,EAAE,kBAAkB,EAAE;AACxC,KAAA,CACF,CAAC,IAAI,CAAC,QAAQ,IAAG;AAChB,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACtC,SAAA;AACD,QAAA,OAAO,QAAQ,CAAC,IAAI,EAAwC,CAAC;AAC/D,KAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;AAIG;AACI,eAAe,gBAAgB,CAAC,EAAU,EAAA;AAC/C,IAAA,OAAO,KAAK,CACV,CAAuF,oFAAA,EAAA,EAAE,EAAE,EAC3F;AACE,QAAA,MAAM,EAAE,KAAK;AACb,QAAA,OAAO,EAAE,EAAE,MAAM,EAAE,kBAAkB,EAAE;AACxC,KAAA,CACF,CAAC,IAAI,CAAC,QAAQ,IAAG;AAChB,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACtC,SAAA;AACD,QAAA,OAAO,QAAQ,CAAC,IAAI,EAAoC,CAAC;AAC3D,KAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;;AAMG;AACI,eAAe,aAAa,CACjC,EAAU,EACV,GAAW,EACX,IAAA,GAAe,IAAI,EAAA;IAEnB,IAAI,EAAE,KAAK,SAAS,EAAE;AACpB,QAAA,MAAM,SAAS,CAAC,4CAA4C,CAAC,CAAC;AAC/D,KAAA;IAED,OAAO,KAAK,CACV,CAAA,2FAAA,CAA6F,EAC7F;AACE,QAAA,MAAM,EAAE,MAAM;AACd,QAAA,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;AAC/C,QAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AACxC,KAAA,CACF,CAAC,IAAI,CAAC,QAAQ,IAAG;AAChB,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACtC,SAAA;AACH,KAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;AASG;AACI,eAAe,UAAU,CAC9B,EAAU,EACV,GAAW,EACX,MAAA,GAAiB,MAAM,CAAC,cAAc,CAAC,EACvC,OAAe,IAAI,EAAA;IAEnB,IAAI,EAAE,KAAK,SAAS,EAAE;AACpB,QAAA,MAAM,SAAS,CAAC,4CAA4C,CAAC,CAAC;AAC/D,KAAA;IAED,OAAO,KAAK,CACV,CAAA,wFAAA,CAA0F,EAC1F;AACE,QAAA,MAAM,EAAE,MAAM;AACd,QAAA,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;AAC/C,QAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAChD,KAAA,CACF,CAAC,IAAI,CAAC,QAAQ,IAAG;AAChB,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACtC,SAAA;AACH,KAAC,CAAC,CAAC;AACL;;;;"}