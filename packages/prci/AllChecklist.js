import { __decorate } from './node_modules/tslib/tslib.es6.js';
import { msg } from '@lit/localize';
import { css, LitElement, html } from 'lit';
import { property, state, customElement } from 'lit/decorators.js';
import { choose } from 'lit/directives/choose.js';
import { when } from 'lit/directives/when.js';
import { containerStyles, textStyles, buttonStyles } from './styles.js';
import { FormComponentState } from './utils/states.js';

const allCheckboxCheckedSvg = new URL(new URL('assets/all-checkbox-checked.svg', import.meta.url).href, import.meta.url).href;
const allCheckboxDashSvg = new URL(new URL('assets/all-checkbox-dash.svg', import.meta.url).href, import.meta.url).href;
const allCheckboxUncheckedSvg = new URL(new URL('assets/all-checkbox-unchecked.svg', import.meta.url).href, import.meta.url).href;
const closeContainerArrowSvg = new URL(new URL('assets/close-container-arrow.svg', import.meta.url).href, import.meta.url).href;
const openContainerArrowSvg = new URL(new URL('assets/open-container-arrow.svg', import.meta.url).href, import.meta.url).href;
/**
 * States describing the choice list
 */
var SelectionState;
(function (SelectionState) {
    SelectionState[SelectionState["ALL"] = 0] = "ALL";
    SelectionState[SelectionState["SOME"] = 1] = "SOME";
    SelectionState[SelectionState["NONE"] = 2] = "NONE";
})(SelectionState || (SelectionState = {}));
let AllChecklist = class AllChecklist extends LitElement {
    constructor() {
        super(...arguments);
        // List of choices to be displayed with a unique identifier, description string (displayed),
        // and checked boolean indicating if the option should be checked initially
        this.choices = [];
        // State indicating if all, some, or none of choices are selected
        this.selectionState = SelectionState.ALL;
        // UI mode for this component
        this.componentMode = FormComponentState.CLOSED;
        // Should all option be included
        this.includeAll = true;
        // Should all option be checked initially
        this.allChecked = true;
        // String to show with the all option
        this.allMessage = msg('Select all');
        // Prefix for events generated by selecting/deselecting options from the list
        this.eventPrefix = 'checklist-click';
        // Should include a close button at bottom of container
        this.includeButtons = false;
        this.includeOther = false;
        // Holds the IDs of all selected choices
        this.selectedChoices = new Set();
    }
    /**
     * Select a choice and notify parent component
     * @param id ID of the choice to select
     */
    selectChoice(id) {
        this.selectedChoices.add(id);
        // Fire add event
        const event = new CustomEvent(`${this.eventPrefix}-select`, {
            bubbles: true,
            composed: true,
            detail: {
                id,
                'first-selection': this.selectedChoices.size === 1,
            },
        });
        this.dispatchEvent(event);
        this.updateSelectionState();
    }
    /**
     * Deselect a choice and notify parent component
     * @param id ID of the choice to delete
     */
    deleteChoice(id) {
        this.selectedChoices.delete(id);
        // Fire delete event
        const event = new CustomEvent(`${this.eventPrefix}-deselect`, {
            bubbles: true,
            composed: true,
            detail: {
                id,
                'none-selected': this.selectedChoices.size === 0,
            },
        });
        this.dispatchEvent(event);
        this.updateSelectionState();
    }
    handleChoiceClick(e) {
        var _a, _b, _c;
        const { id, checked } = e.target;
        if (id === 'all-checkbox') {
            // Get all choice checkboxes
            const allCheckboxes = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.choice-checkbox');
            if (checked) {
                // Select all deselected choices
                this.allChecked = true;
                allCheckboxes === null || allCheckboxes === void 0 ? void 0 : allCheckboxes.forEach(element => {
                    const input = element;
                    if (!input.checked) {
                        input.checked = true;
                        this.selectChoice(input.id);
                    }
                });
            }
            else {
                // Deselect all selected choices
                this.allChecked = false;
                allCheckboxes === null || allCheckboxes === void 0 ? void 0 : allCheckboxes.forEach(element => {
                    const input = element;
                    if (input.checked) {
                        input.checked = false;
                        this.deleteChoice(input.id);
                    }
                });
            }
        }
        else if (checked) {
            // Select a single choice
            this.selectChoice(id);
            // Set all to checked
            const allCheckbox = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.getElementById('all-checkbox');
            allCheckbox.checked = true;
        }
        else {
            // Deselect a single choice
            this.deleteChoice(id);
            // Set all to unchecked if none selected
            if (this.selectedChoices.size === 0) {
                const allCheckbox = (_c = this.shadowRoot) === null || _c === void 0 ? void 0 : _c.getElementById('all-checkbox');
                allCheckbox.checked = false;
            }
        }
    }
    handleOtherClick(e) {
        this.dispatchEvent(new CustomEvent(`${this.eventPrefix}-other-click`, {
            bubbles: true,
            composed: true,
            detail: {
                checked: e.target.checked,
            },
        }));
    }
    handleOtherInput(e) {
        this.dispatchEvent(new CustomEvent(`${this.eventPrefix}-other-input`, {
            bubbles: true,
            composed: true,
            detail: {
                text: e.target.value,
            },
        }));
    }
    /**
     * Update the selection state based on currently selected choices
     */
    updateSelectionState() {
        switch (this.selectedChoices.size) {
            case 0:
                this.selectionState = SelectionState.NONE;
                break;
            case this.choices.length:
                this.selectionState = SelectionState.ALL;
                break;
            default:
                this.selectionState = SelectionState.SOME;
                break;
        }
    }
    /**
     * Determine which choices to display based on the checklist's mode
     * @returns
     */
    getDisplayChoices() {
        switch (this.componentMode) {
            case FormComponentState.CLOSED:
                return [];
            case FormComponentState.OPEN:
                return Array.from(this.choices);
            case FormComponentState.PARTIAL:
                return Array.from(this.choices).filter(c => this.selectedChoices.has(c.id));
            default:
                return [];
        }
    }
    /**
     * Determine which to switch to when open or close button is clicked
     */
    handleButtonClick() {
        if (this.componentMode === FormComponentState.CLOSED ||
            this.componentMode === FormComponentState.PARTIAL) {
            this.componentMode = FormComponentState.OPEN;
        }
        else {
            this.componentMode = FormComponentState.CLOSED;
        }
    }
    /**
     * Hook into willUpdate to ensure the selected choices set matches choices
     * @param _changedProperties Map of changed properties for this update
     */
    willUpdate(_changedProperties) {
        if (_changedProperties.has('choices')) {
            this.choices.forEach(c => {
                if (c.checked) {
                    this.selectedChoices.add(c.id);
                }
            });
            this.updateSelectionState();
        }
    }
    render() {
        return html `
      <div class="choices-list">
        <!-- Optionally render all button -->
        ${when(this.includeAll &&
            !(this.componentMode === FormComponentState.PARTIAL &&
                this.selectionState === SelectionState.SOME), () => html `
            <div class="all-ctr">
              <input
                id="all-checkbox"
                type="checkbox"
                @click=${this.handleChoiceClick}
                ?checked=${this.allChecked}
              />
              <label for="all-checkbox">
                ${choose(this.selectionState, [
            [
                SelectionState.NONE,
                () => html `<img
                        src=${allCheckboxUncheckedSvg}
                        alt="empty checkbox"
                      />`,
            ],
            [
                SelectionState.SOME,
                () => html `<img
                        src=${allCheckboxDashSvg}
                        alt="dash checkbox"
                      />`,
            ],
            [
                SelectionState.ALL,
                () => html `<img
                        src=${allCheckboxCheckedSvg}
                        alt="checked checkbox"
                      />`,
            ],
        ])}
              </label>
              <span class="all-prefix">${this.allMessage}</span>
            </div>
          `)}
        <!-- Render each choice -->
        ${this.getDisplayChoices().map(c => html `
            <div class="choice-ctr">
              <input
                id=${c.id}
                class="choice-checkbox"
                type="checkbox"
                ?checked=${c.checked}
                ?disabled=${c.disabled}
                @change=${this.handleChoiceClick}
              />
              <label>${c.description}</label>
            </div>
          `)}
        <!-- Optionally include an other option -->
        ${when(this.includeOther && this.componentMode === FormComponentState.OPEN, () => html `
          <div id="other-data-ctr">
            <div class="choice-ctr">
              <input
                id='other-checkbox'
                type="checkbox"
                @change=${this.handleOtherClick}
              />
              <label>${msg(html `<b>OTHER-DATA:</b> Specify another type of data`)}</label>
            </div>
            <div id="other-data-input-ctr">
              <span>${msg('Other data type:')}</span>
              <input id="other-data-input" type="text" class="std-txt-input"></input>
            </div>
          </div>
        `)}
      </div>
      <!-- Optionally include a close button -->
      ${when(this.includeButtons, () => html `
          <button class="svg-btn" @click=${this.handleButtonClick}>
            ${when(this.componentMode === FormComponentState.OPEN, () => html `<img src=${closeContainerArrowSvg} alt="close arrow" />`, () => html `<img src=${openContainerArrowSvg} alt="open arrow" />`)}
          </button>
        `)}
    `;
    }
};
AllChecklist.styles = [
    containerStyles,
    textStyles,
    buttonStyles,
    css `
      :host {
        display: grid;
      }

      :host([selection-state='0']) .choice-checkbox {
        opacity: 0.5;
      }

      :host([selection-state='0']) #all-checkbox:checked + label {
        opacity: 1;
      }

      :host([selection-state='1']) #all-checkbox + label {
        opacity: 1;
      }

      :host([selection-state='2']) .choice-checkbox {
        opacity: 1;
      }

      .choices-list {
        display: grid;
        overflow: hidden;
        grid-template-columns: 1fr;
        row-gap: 35px;
        padding: 35px 0px 25px 0px;
      }

      .choice-ctr {
        padding: 0px 30px;
      }

      .all-ctr {
        display: flex;
        align-items: center;
        padding: 0px 30px;
      }

      .all-prefix {
        padding: 0px 0px 0px 4px;
      }

      #all-checkbox {
        display: none;
      }

      #all-checkbox + label {
        height: 13px;
        width: 13px;
        display: inline-block;
        margin: 3px 3px 3px 4px;
      }

      #other-data-input-ctr {
        display: flex;
        column-gap: 5px;
        padding: 20px 55px;
        align-items: center;
      }

      #other-data-input input {
        height: 30px;
        width: 100%;
      }

      #other-data-input span {
        flex-shrink: 0;
      }
    `,
];
__decorate([
    property({ type: Array })
], AllChecklist.prototype, "choices", void 0);
__decorate([
    property({ type: Number, reflect: true, attribute: 'selection-state' })
], AllChecklist.prototype, "selectionState", void 0);
__decorate([
    property({ type: Number, reflect: true, attribute: 'component-mode' })
], AllChecklist.prototype, "componentMode", void 0);
__decorate([
    property({ type: Boolean })
], AllChecklist.prototype, "includeAll", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], AllChecklist.prototype, "allChecked", void 0);
__decorate([
    property({ type: String, attribute: 'all-message' })
], AllChecklist.prototype, "allMessage", void 0);
__decorate([
    property({ type: String, attribute: 'event-prefix' })
], AllChecklist.prototype, "eventPrefix", void 0);
__decorate([
    property({ type: Boolean, attribute: 'include-buttons' })
], AllChecklist.prototype, "includeButtons", void 0);
__decorate([
    property({ type: Boolean, attribute: 'include-other' })
], AllChecklist.prototype, "includeOther", void 0);
__decorate([
    state()
], AllChecklist.prototype, "selectedChoices", void 0);
AllChecklist = __decorate([
    customElement('all-checklist')
], AllChecklist);

export { AllChecklist };
//# sourceMappingURL=AllChecklist.js.map
