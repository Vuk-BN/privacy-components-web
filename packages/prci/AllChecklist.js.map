{"version":3,"file":"AllChecklist.js","sources":["../src/AllChecklist.ts"],"sourcesContent":["import { msg } from '@lit/localize';\nimport { css, html, LitElement } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\nimport { buttonStyles, containerStyles, textStyles } from './styles.js';\nimport { FormComponentState } from './utils/states.js';\n\ninterface Choice {\n  id: string;\n  description: string;\n  checked: boolean;\n  disabled: boolean;\n}\n\n/**\n * States describing the choice list\n */\nenum SelectionState {\n  ALL,\n  SOME,\n  NONE,\n}\n\n@customElement('all-checklist')\nexport class AllChecklist extends LitElement {\n  // List of choices to be displayed with a unique identifier, description string (displayed),\n  // and checked boolean indicating if the option should be checked initially\n  @property({ type: Array }) choices: Choice[] = [];\n\n  // State indicating if all, some, or none of choices are selected\n  @property({ type: Number, reflect: true, attribute: 'selection-state' })\n  selectionState: SelectionState = SelectionState.ALL;\n\n  // UI mode for this component\n  @property({ type: Number, reflect: true, attribute: 'component-mode' })\n  componentMode: FormComponentState = FormComponentState.CLOSED;\n\n  // Should all option be included\n  @property({ type: Boolean }) includeAll: boolean = true;\n\n  // Should all option be checked initially\n  @property({ type: Boolean, reflect: true }) allChecked: boolean = true;\n\n  // String to show with the all option\n  @property({ type: String, attribute: 'all-message' }) allMessage: string =\n    msg('Select all');\n\n  // Prefix for events generated by selecting/deselecting options from the list\n  @property({ type: String, attribute: 'event-prefix' }) eventPrefix: string =\n    'checklist-click';\n\n  // Should include a close button at bottom of container\n  @property({ type: Boolean, attribute: 'include-buttons' }) includeButtons =\n    false;\n\n  // Holds the IDs of all selected choices\n  @state() selectedChoices = new Set<string>();\n\n  static styles = [\n    containerStyles,\n    textStyles,\n    buttonStyles,\n    css`\n      :host {\n        display: grid;\n      }\n\n      :host([selection-state='0']) .choice-checkbox {\n        opacity: 0.5;\n      }\n\n      :host([selection-state='0']) #all-checkbox:checked + label {\n        opacity: 1;\n        background: url('/packages/prci/src/assets/icons/all-checkbox-checked.svg')\n          no-repeat;\n      }\n\n      :host([selection-state='1']) #all-checkbox + label {\n        opacity: 1;\n        background: url('/packages/prci/src/assets/icons/all-checkbox-dash.svg')\n          no-repeat;\n      }\n\n      :host([selection-state='2']) .choice-checkbox {\n        opacity: 1;\n      }\n\n      .choices-list {\n        display: grid;\n        overflow: hidden;\n        grid-template-columns: 1fr;\n        row-gap: 35px;\n        padding: 35px 0px 25px 0px;\n      }\n\n      .choice-ctr {\n        padding: 0px 30px;\n      }\n\n      .all-ctr {\n        display: flex;\n        align-items: center;\n        padding: 0px 30px;\n      }\n\n      .all-prefix {\n        padding: 0px 0px 0px 4px;\n      }\n\n      #all-checkbox {\n        display: none;\n      }\n\n      #all-checkbox + label {\n        background: url('/packages/prci/src/assets/icons/all-checkbox-unchecked.svg')\n          no-repeat;\n        height: 13px;\n        width: 13px;\n        display: inline-block;\n        margin: 3px 3px 3px 4px;\n      }\n    `,\n  ];\n\n  /**\n   * Select a choice and notify parent component\n   * @param id ID of the choice to select\n   */\n  selectChoice(id: string) {\n    this.selectedChoices.add(id);\n    // Fire add event\n    const event = new CustomEvent(`${this.eventPrefix}-select`, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        id,\n        'first-selection': this.selectedChoices.size === 1,\n      },\n    });\n    this.dispatchEvent(event);\n    this.updateSelectionState();\n  }\n\n  /**\n   * Deselect a choice and notify parent component\n   * @param id ID of the choice to delete\n   */\n  deleteChoice(id: string) {\n    this.selectedChoices.delete(id);\n    // Fire delete event\n    const event = new CustomEvent(`${this.eventPrefix}-deselect`, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        id,\n        'none-selected': this.selectedChoices.size === 0,\n      },\n    });\n    this.dispatchEvent(event);\n    this.updateSelectionState();\n  }\n\n  handleChoiceClick(e: Event) {\n    // debug: only enters this once\n    const { id, checked } = e.target as HTMLInputElement;\n    if (id === 'all-checkbox') {\n      // Get all choice checkboxes\n      const allCheckboxes =\n        this.shadowRoot?.querySelectorAll('.choice-checkbox');\n\n      if (checked) {\n        // Select all deselected choices\n        this.allChecked = true;\n        allCheckboxes?.forEach(element => {\n          const input = element as HTMLInputElement;\n          if (!input.checked) {\n            input.checked = true;\n            this.selectChoice(input.id);\n          }\n        });\n      } else {\n        // Deselect all selected choices\n        this.allChecked = false;\n        allCheckboxes?.forEach(element => {\n          const input = element as HTMLInputElement;\n          if (input.checked) {\n            input.checked = false;\n            this.deleteChoice(input.id);\n          }\n        });\n      }\n    } else if (checked) {\n      // Select a single choice\n      this.selectChoice(id);\n      // Set all to checked\n      const allCheckbox = this.shadowRoot?.getElementById(\n        'all-checkbox'\n      ) as HTMLInputElement;\n      allCheckbox.checked = true;\n    } else {\n      // Deselect a single choice\n      this.deleteChoice(id);\n      // Set all to unchecked if none selected\n      if (this.selectedChoices.size === 0) {\n        const allCheckbox = this.shadowRoot?.getElementById(\n          'all-checkbox'\n        ) as HTMLInputElement;\n        allCheckbox.checked = false;\n      }\n    }\n  }\n\n  /**\n   * Update the selection state based on currently selected choices\n   */\n  updateSelectionState() {\n    switch (this.selectedChoices.size) {\n      case 0:\n        this.selectionState = SelectionState.NONE;\n        break;\n      case this.choices.length:\n        this.selectionState = SelectionState.ALL;\n        break;\n      default:\n        this.selectionState = SelectionState.SOME;\n        break;\n    }\n  }\n\n  /**\n   * Determine which choices to display based on the checklist's mode\n   * @returns\n   */\n  getDisplayChoices(): Array<Choice> {\n    switch (this.componentMode) {\n      case FormComponentState.CLOSED:\n        return [];\n\n      case FormComponentState.OPEN:\n        return Array.from(this.choices);\n\n      case FormComponentState.PARTIAL:\n        return Array.from(this.choices).filter(c =>\n          this.selectedChoices.has(c.id)\n        );\n\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Determine which to switch to when open or close button is clicked\n   */\n  handleButtonClick() {\n    if (\n      this.componentMode === FormComponentState.CLOSED ||\n      this.componentMode === FormComponentState.PARTIAL\n    ) {\n      this.componentMode = FormComponentState.OPEN;\n    } else {\n      this.componentMode = FormComponentState.CLOSED;\n    }\n  }\n\n  render() {\n    return html`\n      <div class=\"choices-list\">\n        <!-- Optionally render all button -->\n        ${when(\n          this.includeAll &&\n            !(\n              this.componentMode === FormComponentState.PARTIAL &&\n              this.selectionState === SelectionState.SOME\n            ),\n          () => html`\n            <div class=\"all-ctr\">\n              <input\n                id=\"all-checkbox\"\n                type=\"checkbox\"\n                @click=${this.handleChoiceClick}\n                ?checked=${this.allChecked}\n              />\n              <label for=\"all-checkbox\"></label>\n              <span class=\"all-prefix\">${this.allMessage}</span>\n            </div>\n          `\n        )}\n        <!-- Render each choice -->\n        ${this.getDisplayChoices().map(\n          c => html`\n            <div class=\"choice-ctr\">\n              <input\n                id=${c.id}\n                class=\"choice-checkbox\"\n                type=\"checkbox\"\n                ?checked=${c.checked}\n                ?disabled=${c.disabled}\n                @change=${this.handleChoiceClick}\n              />\n              <label>${c.description}</label>\n            </div>\n          `\n        )}\n      </div>\n      <!-- Optionally include a close button -->\n      ${when(\n        this.includeButtons,\n        () => html`\n          <button\n            @click=${this.handleButtonClick}\n            class=\"ctr-btn ${this.componentMode === FormComponentState.OPEN\n              ? 'close-btn'\n              : 'open-btn'}\"\n          ></button>\n        `\n      )}\n    `;\n  }\n}\n"],"names":[],"mappings":"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"}